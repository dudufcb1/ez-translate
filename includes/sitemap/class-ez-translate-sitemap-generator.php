<?php
/**
 * Base Sitemap Generator for EZ Translate
 *
 * @package EZTranslate
 * @since 1.0.0
 */

namespace EZTranslate\Sitemap;

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

use EZTranslate\Logger;
use EZTranslate\LanguageManager;

/**
 * Base Sitemap Generator class
 *
 * Provides common functionality for all sitemap generators
 *
 * @since 1.0.0
 */
abstract class SitemapGenerator {

    /**
     * Sitemap settings
     *
     * @var array
     * @since 1.0.0
     */
    protected $settings;

    /**
     * Constructor
     *
     * @since 1.0.0
     */
    public function __construct() {
        $this->settings = $this->get_sitemap_settings();
        Logger::debug('SitemapGenerator initialized', array('type' => get_class($this)));
    }

    /**
     * Get sitemap settings
     *
     * @return array
     * @since 1.0.0
     */
    protected function get_sitemap_settings() {
        $defaults = array(
            'enabled' => true,
            'post_types' => array('post', 'page'),
            'taxonomies' => array('category', 'post_tag'),
            'languages' => array(),
            'excluded_urls' => array(),
            'cache_duration' => 86400, // 24 hours
            'priorities' => array(
                'post' => 0.8,
                'page' => 0.9,
                'landing_page' => 1.0,
                'category' => 0.6,
                'post_tag' => 0.5
            )
        );

        $settings = get_option('ez_translate_sitemap_settings', array());
        return wp_parse_args($settings, $defaults);
    }

    /**
     * Generate XML header
     *
     * @return string
     * @since 1.0.0
     */
    protected function get_xml_header() {
        return '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
    }

    /**
     * Generate sitemap opening tag
     *
     * @return string
     * @since 1.0.0
     */
    protected function get_urlset_opening() {
        return '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n" .
               '<!-- Generated by EZ Translate Plugin on ' . current_time('c') . ' -->' . "\n";
    }

    /**
     * Generate sitemap closing tag
     *
     * @return string
     * @since 1.0.0
     */
    protected function get_urlset_closing() {
        return '</urlset>';
    }

    /**
     * Generate sitemapindex opening tag
     *
     * @return string
     * @since 1.0.0
     */
    protected function get_sitemapindex_opening() {
        return '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n" .
               '<!-- Generated by EZ Translate Plugin on ' . current_time('c') . ' -->' . "\n";
    }

    /**
     * Generate sitemapindex closing tag
     *
     * @return string
     * @since 1.0.0
     */
    protected function get_sitemapindex_closing() {
        return '</sitemapindex>';
    }

    /**
     * Generate URL entry for sitemap
     *
     * @param string $url URL
     * @param string $lastmod Last modification date
     * @param string $changefreq Change frequency
     * @param float $priority Priority
     * @return string
     * @since 1.0.0
     */
    protected function generate_url_entry($url, $lastmod = '', $changefreq = 'weekly', $priority = 0.5) {
        $entry = "  <url>\n";
        $entry .= "    <loc>" . esc_url($url) . "</loc>\n";
        
        if (!empty($lastmod)) {
            $entry .= "    <lastmod>" . esc_html($lastmod) . "</lastmod>\n";
        }
        
        $entry .= "    <changefreq>" . esc_html($changefreq) . "</changefreq>\n";
        $entry .= "    <priority>" . number_format($priority, 1) . "</priority>\n";
        $entry .= "  </url>\n";
        
        return $entry;
    }

    /**
     * Generate sitemap entry for sitemapindex
     *
     * @param string $url Sitemap URL
     * @param string $lastmod Last modification date
     * @return string
     * @since 1.0.0
     */
    protected function generate_sitemap_entry($url, $lastmod = '') {
        $entry = "  <sitemap>\n";
        $entry .= "    <loc>" . esc_url($url) . "</loc>\n";
        
        if (!empty($lastmod)) {
            $entry .= "    <lastmod>" . esc_html($lastmod) . "</lastmod>\n";
        }
        
        $entry .= "  </sitemap>\n";
        
        return $entry;
    }

    /**
     * Get enabled languages
     *
     * @return array
     * @since 1.0.0
     */
    protected function get_enabled_languages() {
        if (!empty($this->settings['languages'])) {
            return $this->settings['languages'];
        }
        
        $languages = LanguageManager::get_enabled_languages();
        $language_codes = array();
        
        foreach ($languages as $language) {
            $language_codes[] = $language['code'];
        }
        
        return $language_codes;
    }

    /**
     * Check if URL should be excluded
     *
     * @param string $url URL to check
     * @return bool
     * @since 1.0.0
     */
    protected function is_url_excluded($url) {
        if (empty($this->settings['excluded_urls'])) {
            return false;
        }
        
        foreach ($this->settings['excluded_urls'] as $excluded) {
            if (strpos($url, $excluded) !== false) {
                return true;
            }
        }
        
        return false;
    }

    /**
     * Get priority for content type
     *
     * @param string $type Content type
     * @return float
     * @since 1.0.0
     */
    protected function get_priority_for_type($type) {
        return isset($this->settings['priorities'][$type]) ? 
               (float) $this->settings['priorities'][$type] : 0.5;
    }

    /**
     * Format date for sitemap
     *
     * @param string $date Date string
     * @return string
     * @since 1.0.0
     */
    protected function format_sitemap_date($date) {
        if (empty($date)) {
            return '';
        }
        
        $timestamp = is_numeric($date) ? $date : strtotime($date);
        return date('c', $timestamp);
    }

    /**
     * Get change frequency based on post type and age
     *
     * @param string $post_type Post type
     * @param string $date Last modified date
     * @return string
     * @since 1.0.0
     */
    protected function get_change_frequency($post_type, $date = '') {
        $frequencies = array(
            'post' => 'weekly',
            'page' => 'monthly',
            'landing_page' => 'monthly'
        );
        
        $base_frequency = isset($frequencies[$post_type]) ? $frequencies[$post_type] : 'monthly';
        
        // Adjust frequency based on age
        if (!empty($date)) {
            $age_days = (time() - strtotime($date)) / DAY_IN_SECONDS;
            
            if ($age_days < 7) {
                return 'daily';
            } elseif ($age_days < 30) {
                return 'weekly';
            } elseif ($age_days < 365) {
                return 'monthly';
            } else {
                return 'yearly';
            }
        }
        
        return $base_frequency;
    }

    /**
     * Get site URL with proper trailing slash handling
     *
     * @return string
     * @since 1.0.0
     */
    protected function get_site_url() {
        return untrailingslashit(get_site_url());
    }

    /**
     * Abstract method to generate sitemap content
     *
     * @param string $language Language code (optional)
     * @return string
     * @since 1.0.0
     */
    abstract public function generate($language = '');

    /**
     * Get last modification time for sitemap type
     *
     * @param string $language Language code (optional)
     * @return string
     * @since 1.0.0
     */
    abstract public function get_last_modified($language = '');
}
